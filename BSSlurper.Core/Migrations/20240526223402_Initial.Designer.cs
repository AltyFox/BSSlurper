// <auto-generated />
using System;
using BSSlurper.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BSSlurper.Core.Migrations
{
    [DbContext(typeof(SlurpedContext))]
    [Migration("20240526223402_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDetail", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Automapper")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "automapper");

                    b.Property<bool>("BlQualified")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "blQualified");

                    b.Property<bool>("BlRanked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "blRanked");

                    b.Property<bool>("Bookmarked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "bookmarked");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("DeclaredAi")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "declaredAi");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("LastPublishedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastPublishedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "lastPublishedAt");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<bool>("Qualified")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "qualified");

                    b.Property<bool>("Ranked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "ranked");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnType("TEXT")
                        .HasColumnName("UploadedUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "uploaded");

                    b.Property<long?>("UploaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MapId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UploaderId");

                    b.ToTable("Maps");

                    b.HasAnnotation("Relational:JsonPropertyName", "map");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDetailWithOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Order")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "order");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MapsWithOrder", (string)null);
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Bombs")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "bombs");

                    b.Property<string>("Characteristic")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "characteristic");

                    b.Property<bool>("Chroma")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "chroma");

                    b.Property<bool>("Cinema")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "cinema");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "difficulty");

                    b.Property<long>("Events")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "events");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "label");

                    b.Property<double>("Length")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "length");

                    b.Property<int?>("MapVersionVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MaxScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "maxScore");

                    b.Property<bool>("Me")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "me");

                    b.Property<bool>("Ne")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "ne");

                    b.Property<double>("Njs")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "njs");

                    b.Property<long>("Notes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<double>("Nps")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "nps");

                    b.Property<long>("Obstacles")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "obstacles");

                    b.Property<double>("Offset")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "offset");

                    b.Property<double>("Seconds")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "seconds");

                    b.HasKey("Id");

                    b.HasIndex("MapVersionVersionId");

                    b.ToTable("Difficulties");

                    b.HasAnnotation("Relational:JsonPropertyName", "diffs");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "coverURL");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "downloadURL");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "hash");

                    b.Property<int?>("OldVersionMapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "previewURL");

                    b.Property<long?>("SageScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "sageScore");

                    b.Property<string>("State")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "state");

                    b.Property<int?>("VersionMapId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VersionId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("OldVersionMapId");

                    b.HasIndex("VersionMapId");

                    b.ToTable("Versions");

                    b.HasAnnotation("Relational:JsonPropertyName", "versions");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("Admin")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "admin");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar");

                    b.Property<bool>("Curator")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "curator");

                    b.Property<bool?>("CuratorTab")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "curatorTab");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "hash");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PlaylistUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "playlistUrl");

                    b.Property<bool>("SeniorCurator")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "seniorCurator");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<bool?>("VerifiedMapper")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "verifiedMapper");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasAnnotation("Relational:JsonPropertyName", "owner");
                });

            modelBuilder.Entity("BSSlurper.Core.PlaylistWithMaps", b =>
                {
                    b.Property<long>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "playlistId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "downloadURL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaylistImage")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "playlistImage");

                    b.Property<string>("PlaylistImage512")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "playlistImage512");

                    b.Property<DateTime?>("SongsChangedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("SongsChangedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "songsChangedAt");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdatedAtUtc")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PlaylistId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists", (string)null);
                });

            modelBuilder.Entity("BSSlurper.Core.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasAnnotation("Relational:JsonPropertyName", "tags");
                });

            modelBuilder.Entity("MapDetailTag", b =>
                {
                    b.Property<int>("MapDetailMapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MapDetailMapId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("MapTags", (string)null);
                });

            modelBuilder.Entity("MapDetailWithOrderPlaylistWithMaps", b =>
                {
                    b.Property<int>("MapsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaylistWithMapsPlaylistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MapsId", "PlaylistWithMapsPlaylistId");

                    b.HasIndex("PlaylistWithMapsPlaylistId");

                    b.ToTable("PlaylistMaps", (string)null);
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDetail", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.UserDetail", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId");

                    b.OwnsOne("BSSlurper.Core.BeatSaver.API.Models.MapDetailMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("MapDetailMapId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Bpm")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "bpm");

                            b1.Property<long>("Duration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "duration");

                            b1.Property<string>("LevelAuthorName")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "levelAuthorName");

                            b1.Property<string>("SongAuthorName")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "songAuthorName");

                            b1.Property<string>("SongName")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "songName");

                            b1.Property<string>("SongSubName")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "songSubName");

                            b1.HasKey("MapDetailMapId");

                            b1.ToTable("Maps");

                            b1.HasAnnotation("Relational:JsonPropertyName", "metadata");

                            b1.WithOwner()
                                .HasForeignKey("MapDetailMapId");
                        });

                    b.OwnsOne("BSSlurper.Core.BeatSaver.API.Models.MapStats", "Stats", b1 =>
                        {
                            b1.Property<int>("MapDetailMapId")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("Downloads")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "downloads");

                            b1.Property<long>("Downvotes")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "downvotes");

                            b1.Property<long>("Plays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "plays");

                            b1.Property<double>("Score")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "score");

                            b1.Property<long>("Upvotes")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "upvotes");

                            b1.HasKey("MapDetailMapId");

                            b1.ToTable("Maps");

                            b1.HasAnnotation("Relational:JsonPropertyName", "stats");

                            b1.WithOwner()
                                .HasForeignKey("MapDetailMapId");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("Stats");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDetailWithOrder", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapDetail", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDifficulty", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapVersion", null)
                        .WithMany("Diffs")
                        .HasForeignKey("MapVersionVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("BSSlurper.Core.BeatSaver.API.Models.MapParitySummary", "ParitySummary", b1 =>
                        {
                            b1.Property<int>("MapDifficultyId")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("Errors")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "errors");

                            b1.Property<long>("Resets")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "resets");

                            b1.Property<long>("Warns")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "warns");

                            b1.HasKey("MapDifficultyId");

                            b1.ToTable("Difficulties");

                            b1.HasAnnotation("Relational:JsonPropertyName", "paritySummary");

                            b1.WithOwner()
                                .HasForeignKey("MapDifficultyId");
                        });

                    b.Navigation("ParitySummary");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapVersion", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapDetail", null)
                        .WithMany("OldVersions")
                        .HasForeignKey("OldVersionMapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapDetail", null)
                        .WithMany("Versions")
                        .HasForeignKey("VersionMapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSSlurper.Core.PlaylistWithMaps", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.UserDetail", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.OwnsOne("BSSlurper.Core.BeatSaver.API.Models.PlaylistStats", "Stats", b1 =>
                        {
                            b1.Property<long>("PlaylistWithMapsPlaylistId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("AvgScore")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "avgScore");

                            b1.Property<long>("DownVotes")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "downVotes");

                            b1.Property<long>("MapperCount")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "mapperCount");

                            b1.Property<double>("MaxNps")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "maxNps");

                            b1.Property<double>("MinNps")
                                .HasColumnType("REAL")
                                .HasAnnotation("Relational:JsonPropertyName", "minNps");

                            b1.Property<long>("TotalDuration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "totalDuration");

                            b1.Property<long>("TotalMaps")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "totalMaps");

                            b1.Property<long>("UpVotes")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "upVotes");

                            b1.HasKey("PlaylistWithMapsPlaylistId");

                            b1.ToTable("Playlists");

                            b1.HasAnnotation("Relational:JsonPropertyName", "stats");

                            b1.WithOwner()
                                .HasForeignKey("PlaylistWithMapsPlaylistId");
                        });

                    b.Navigation("Owner");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("MapDetailTag", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapDetail", null)
                        .WithMany()
                        .HasForeignKey("MapDetailMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSSlurper.Core.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapDetailWithOrderPlaylistWithMaps", b =>
                {
                    b.HasOne("BSSlurper.Core.BeatSaver.API.Models.MapDetailWithOrder", null)
                        .WithMany()
                        .HasForeignKey("MapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSSlurper.Core.PlaylistWithMaps", null)
                        .WithMany()
                        .HasForeignKey("PlaylistWithMapsPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapDetail", b =>
                {
                    b.Navigation("OldVersions");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("BSSlurper.Core.BeatSaver.API.Models.MapVersion", b =>
                {
                    b.Navigation("Diffs");
                });
#pragma warning restore 612, 618
        }
    }
}
